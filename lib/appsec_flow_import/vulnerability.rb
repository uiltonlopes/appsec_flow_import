module AppsecFlowImport
  class Vulnerability
    attr_reader :client, :args

    def initialize(client)
      raise ArgumentError, 'client param must be a Client class' if client.class != AppsecFlowImport::Client

      @client = client
    end

    def create!(*params)
      # params.first[:evidences].each do |archive_path|
      #   params.first[:vulnerability_archives_attributes] = [{ archive: Faraday::UploadIO.new(archive_path, 'image/png') }]
      # end
      # params.first.delete(:evidences)

      # params.first[:evidences].each do |archive_path|
      #   params.first[:vulnerability_archives_attributes] = [{ evidence_text: Faraday::UploadIO.new(archive_path, 'image/png') }]
      # end

      # params.first.delete(:evidences)

      conn = Faraday.new(url: @client.base_url) do |f|
        f.request :multipart
        f.request :url_encoded
        f.adapter :net_http
        f.ssl.verify = false
      end

      conn.post '/api/v2/vulnerabilities', vulnerability: params.first do |request|
        request.headers['x-api-key'] = @client.api_key
      end
    end
  end
end
